openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/mymmrac/Project-Glynn/1.0.0
  - url: http://{host}:{port}/{basePath}
    description: Server API
    variables:
      host:
        default: localhost
      port:
        default: '8080'
      basePath:
        default: api
info:
  description: Chat for communication in different chat rooms with any number of users.
  version: "1.0.0"
  title: Project Glynn
  contact:
    name: mymmrac
    email: mymmrac@gmail.com
  license:
    name: MIT License
    url: https://github.com/mymmrac/project-glynn/blob/main/LICENSE
tags:
  - name: users
    description: Operations available to regular users
  - name: admins
    description: Secured admin-only calls which requiers admin token
security: 
  - {}
  - adminToken: []
paths:
  /rooms/{roomToken}/connections:
    get:
      summary: Room info
      tags: [users]
      security: 
        - {}
      parameters: 
      - $ref: '#/components/parameters/RoomToken'
      responses:
        '200':
          description: Number of users and messages
          content:
            application/json:
              schema:
                type: object
                properties:
                  onlineUsers:
                    type: integer
                    example: 4
                  messageCount:
                    type: integer
                    example: 24
        '404':
          $ref: '#/components/responses/RoomNotFound'
    post:
      summary: Connect to room
      tags: [users]
      security: 
        - {}
      parameters: 
      - $ref: '#/components/parameters/RoomToken'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Connected to room
        '400':
          description: Bad user data
        '403':
          description: Username already taken in this room or user with same id already connected
        '404':
          $ref: '#/components/responses/RoomNotFound'
    patch:
      summary: Update connection status
      tags: [users]
      security: 
        - {}
      parameters: 
      - $ref: '#/components/parameters/RoomToken'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserID'
      responses:
        '202':
          description: Updated
        '403':
          $ref: '#/components/responses/UserNotConnected'
        '404':
          $ref: '#/components/responses/RoomNotFound'
  /rooms/{roomToken}/messages/{userID}:
    get:
      summary: Get new messages
      tags: [users]
      security: 
        - {}
      parameters:
      - $ref: '#/components/parameters/RoomToken'
      - $ref: '#/components/parameters/UserID'
      - in: query
        name: lastMessageID
        required: false
        schema:
          $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Array of new messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '403':
          $ref: '#/components/responses/UserNotConnected'
        '404':
          $ref: '#/components/responses/UserOrRoomNotFound'
    post:
      summary: Send new message
      tags: [users]
      security: 
        - {}
      parameters:
      - $ref: '#/components/parameters/RoomToken'
      - $ref: '#/components/parameters/UserID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageText'
      responses:
        '201':
          description: Sent
        '400':
          description: Bad message data
        '403':
          $ref: '#/components/responses/UserNotConnected'
        '404':
          $ref: '#/components/responses/UserOrRoomNotFound'
  /rooms:
    get:
      summary: List of rooms
      tags: [admins]
      responses:
        '200':
            description: Array of new messages
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Token'
        '403': 
          $ref: '#/components/responses/Unauthorized'
    post:
      summary: Create new room
      tags: [admins]
      responses:
        '201':
            description: Token of new room
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Token'
        '403': 
          $ref: '#/components/responses/Unauthorized'
  /rooms{roomToken}:
    delete:
      summary: Delete room
      tags: [admins]
      parameters:
      - $ref: '#/components/parameters/RoomToken'
      responses:
        '200':
          description: Deleted
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/RoomNotFound'
components:
  parameters:
    RoomToken:
      in: path
      name: roomToken
      required: true
      schema:
        $ref: '#/components/schemas/Token'
    UserID:
      in: path
      name: userID
      required: true
      schema:
        $ref: '#/components/schemas/UserID'
  responses:
    RoomNotFound:
      description: No such room
    UserOrRoomNotFound:
      description: No such room or user
    UserNotConnected:
      description: User isn't connected to room
    Unauthorized:
      description: Unauthorized request
  securitySchemes:
    adminToken:
      type: apiKey
      name: AdminToken
      in: header
  schemas:
    UserID:
      type: string
      example: "c9d00bab4a66d63325ba77387d3e0ab44bd25b62e57ca72568cc11d73ab20034"
    Token:
      type: string
      example: "123e4567-e89b-12d3-a456-426614174000"
    ID:
      type: integer
      format: int64
      example: 5313117
    Username:
      type: string
      example: "Test"
    User:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UserID'
        username:
          $ref: '#/components/schemas/Username'
    MessageText:
      type: string
      example: "Test message"
    Message:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        username:
          $ref: '#/components/schemas/Username'
        text:
          $ref: '#/components/schemas/MessageText'
        time:
          type: string
          format: date-time
          example: "2006-01-02T15:04:05.000Z"
